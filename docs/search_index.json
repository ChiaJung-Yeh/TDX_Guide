[["運輸資料應用.html", "Chapter 7 運輸資料應用 7.1 計算公車站點間旅行距離", " Chapter 7 運輸資料應用 本章節主要示範運輸資料於實務場域中的應用。 7.1 計算公車站點間旅行距離 本節透過 TDX 公車站牌與路線圖資，建立演算法計算各站牌的累積里程，進而計算站點間旅行距離（簡報）。 7.1.1 目的 站點間距離可用以反映任兩站點間公車行駛的實際里程，該數據可進一步與 TDX 歷史資料中的行駛時間（Bus_TravelTime()）或公車歷史動態資料（Bus_RealTime()）對應，以計算各區間的平均速度，尋找公車各時段阻塞的區間，進而提出相對應的改善方式。在 GTFS 格式中，里程資訊為必備欄位，如是可依據各站點的累積里程推算任兩站點間的距離。然而 TDX 的公車站點資料（Bus_StopOfRoute）中並未提供該數據，進而無法計算站點間距離。其一解決方式是將各站點的經緯度輸入至地圖路徑規劃的 API 中，尋找公共運輸的最佳路徑，然而此一方法並不能確保所選擇的運具為特定公車路線；若以私有運具的路徑概似之，其缺點乃公車路線並不確保是最短距離，乃因受限於公車營運之限制或提升服務可及性，站點間距離可能大於兩點間的最短路徑長度。此外，使用地圖 API 曠日廢時或所需費用甚高，因此實務上可能並不合適。綜上所述，本節將建構一套演算法，透過 TDX 既有的公車路線圖資（Bus_Shape()）與公車站牌圖資（Bus_StopOfRoute()）切分數個站牌間的區間，依此計算各區間的長度即為站點間旅行距離。由於公車站點並不一定落於公車路線上（通常不可能是），故必須先行地圖匹配（map-matching），本演算法中簡單應用 Paul Newson 與 John Krumm 所提出之先進地圖匹配法（advanced map-matching），將所有公車站牌定位至路線上，以便於拆分並計算累積里程。 7.1.2 使用資料與函式 library(TDX) # TDX 套件中應用函式 Bus_Route() Bus_Shape() Bus_StopOfRoute() 7.1.3 演算概念與步驟 本演算法步驟如圖7.1所示。圖中綠色點為公車站牌，藍色線段為公車路線，首先將公車站牌匹配至公車路線上，並依此切分公車路線，最後計算兩站牌間的距離即可得站間旅行距離。 圖 7.1: 演算法步驟示意圖 步驟一：拆分公車路線之線段 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
